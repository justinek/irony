(define alpha 1)
(define states (list 'terrible 'bad 'neutral 'good 'amazing))

(define (state-prior ID)
   (case ID
         (('1) (multinomial states '(0.1 0.5 0.2 0.1 0.1)))
         (('2) (multinomial states '(0.1 0.1 0.1 0.2 0.5)))
         ))

;; Define valences
(define valences (list 'pos 'neg))

;; Valence prior defined in terms of positive valence. If the current state
;; is terrible, it's extremely likely that the valence associted is negative.
;; If it's ok, then the valence could be negative or positive with equal probability.
(define valence-prior (list 
                       (list 'terrible 0.1)
                       (list 'bad 0.3)
                       (list 'neutral 0.5) 
                       (list 'good 0.7)
                       (list 'amazing 0.9)))


;; Define arousals. Assuming arousal is binary, but could model as continuous.
(define arousals (list 'low 'high))

(define arousal-prior (list 
                       (list 'terrible 0.1)
                       (list 'bad 0.5)
                       (list 'neutral 0.9) 
                       (list 'good 0.5)
                       (list 'amazing 0.1)))

;; Define goals and goal priors. Could want to communicate state of the world,
;; valence about it, or arousal (intensity of feeling) about it.
;(define goals (list 'goal-state 'goal-valence 'goal-arousal))
;(define (goal-prior) (multinomial goals '(0.1 0.1 0.1)))

(define goals (list 
  'goal-state 
  'goal-valence 
  ;'goal-arousal
  ))

(define (goal-prior) (uniform-draw goals))

;; Assume possible utterances are identical to possible states
(define utterances states)

;; Assume cost of utterances is uniform.
(define (utterance-prior) 
  (multinomial utterances '(0.1 0.1 0.1 0.1 0.1)))

;; Sample valence given a state.
(define (sample-valence state prior)
  (let ((current-state-valence-pair (first prior)))
    (if (equal? state (first current-state-valence-pair))
        (if (flip (second current-state-valence-pair))
            'pos
            'neg)
        (sample-valence state (rest prior)))))

;; Sample arousal given a state.
(define (sample-arousal state prior)
  (let ((current-state-arousal-pair (first prior)))
    (if (equal? state (first current-state-arousal-pair))
        (if (flip (second current-state-arousal-pair))
            'low
            'high)
        (sample-arousal state (rest prior)))))

; Literal interpretation is just when utterance equals state
(define (literal-interpretation utterance state)
  (equal? utterance state))

; A speaker's goal is satisfied if the listener infers the correct and relevant information.
(define (goal-satisfied? goal listener-state-valence-arousal speaker-state speaker-valence speaker-arousal)
  (case goal
    (('goal-state) (equal? (first listener-state-valence-arousal) speaker-state))
    (('goal-valence) (equal? (second listener-state-valence-arousal) speaker-valence))
    ;(('goal-arousal) (equal? (third listener-state-valence-arousal) speaker-arousal))
    ;(('goal-state-valence) (and (equal? (first listener-state-valence-arousal) speaker-state)
    ;                            (equal? (second listener-state-valence-arousal) speaker-valence)))
    ;(('goal-state-arousal) (and (equal? (first listener-state-valence-arousal) speaker-state)
    ;                            (equal? (third listener-state-valence-arousal) speaker-arousal)))
    ;(('goal-valence-arousal) (and (equal? (second listener-state-valence-arousal) speaker-valence)
    ;                            (equal? (third listener-state-valence-arousal) speaker-arousal)))
    ;(('goal-state-valence-arousal) (and (equal? (first listener-state-valence-arousal) speaker-state)
    ;                              (and (equal? (second listener-state-valence-arousal) speaker-valence)
    ;                            (equal? (third listener-state-valence-arousal) speaker-arousal))))

    )
  )

(define speaker
  (mem (lambda (imageID state valence arousal goal depth)
  (enumeration-query
   (define utterance (utterance-prior))
   ; Choose utterance
   utterance
   ; Conditioned on goal being satisfied
    (goal-satisfied? goal (apply multinomial (listener imageID utterance depth)) 
                     state valence arousal)
   ))))

(define listener
  (mem (lambda (imageID utterance depth)
  (enumeration-query
   (define state (state-prior imageID))
   (define valence (sample-valence state valence-prior))
   (define arousal (sample-arousal state arousal-prior))
   (define speaker-goal (goal-prior))
   ; Choose interpretation
   (list state valence arousal)
   ; Given speaker's utterance
   (if (equal? depth 0)
       (literal-interpretation utterance state)
       (equal? utterance
               (apply multinomial (raise-to-power 
                                   (speaker imageID state valence arousal speaker-goal 
                                            (- depth 1)) alpha))))
   ))))

(define (raise-to-power speaker-dist alpha)
  (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))

(define depth 1)

(define (interpret imageID utterance) 
  (listener imageID utterance depth))

(list
  (list
  (interpret '1 'terrible))
  (list
  (interpret '2 'terrible))
)
